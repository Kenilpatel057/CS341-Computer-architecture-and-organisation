Script started on 2021-04-03 02:36:31-04:00 [TERM="xterm" TTY="/dev/pts/11" COLUMNS="80" LINES="24"]
kenil57@pe15:~/cs341/mp2/part2+3$ ls
makefile			   printbinc.o	  strncpyc.c   strncpy.syms
mp2_part2_vserver_typescript	   printbin.lnx   strncpyc.o   syms
mp2_part3_tutorvserver_typescript  printbin.o	  strncpy.lnx  typescript
mp2_part3_users_typescript	   printbin.s	  strncpy.o
printbinc.c			   printbin.syms  strncpy.s
kenil57@pe15:~/cs341/mp2/part2+3$ pwd
/home/kenil57/cs341/mp2/part2+3
kenil57@pe15:~/cs341/mp2/part2+3$ sl[K[Kls -lg
total 140
-rw-r--r-- 1 cs341-1G  2082 Aug 15  2020 makefile
-rw-r--r-- 1 cs341-1G  7945 Apr  3 02:35 mp2_part2_vserver_typescript
-rw-r--r-- 1 cs341-1G  4805 Apr  3 02:26 mp2_part3_tutorvserver_typescript
-rw-r--r-- 1 cs341-1G  6975 Apr  3 02:23 mp2_part3_users_typescript
-rw-r--r-- 1 cs341-1G   432 Aug 15  2020 printbinc.c
-rw-r--r-- 1 cs341-1G  6416 Apr  3 02:00 printbinc.o
-rwxr-xr-x 1 cs341-1G 30572 Apr  3 02:00 printbin.lnx
-rw-r--r-- 1 cs341-1G   704 Apr  3 02:00 printbin.o
-rw-r--r-- 1 cs341-1G   687 Apr  1 13:32 printbin.s
-rw-r--r-- 1 cs341-1G  1085 Apr  3 02:00 printbin.syms
-rw-r--r-- 1 cs341-1G   926 Aug 15  2020 strncpyc.c
-rw-r--r-- 1 cs341-1G  7068 Apr  3 02:00 strncpyc.o
-rwxr-xr-x 1 cs341-1G 31600 Apr  3 02:00 strncpy.lnx
-rw-r--r-- 1 cs341-1G   548 Apr  3 02:00 strncpy.o
-rw-r--r-- 1 cs341-1G   899 Apr  3 01:57 strncpy.s
-rw-r--r-- 1 cs341-1G  1055 Apr  3 02:00 strncpy.syms
lrwxrwxrwx 1 cs341-1G    12 Apr  3 02:00 syms -> strncpy.syms
-rw-r--r-- 1 cs341-1G     0 Apr  3 02:36 typescript
kenil57@pe15:~/cs341/mp2/part2+3$ cat printbin.s

.global printbin
	.text
printbin:
	pushl %ebp		#pushing in stack	    
	movl %esp, %ebp
    	movb 8(%ebp), %al		
	movl $string, %edx		
	call donibble		# calling donibble 1st time	
	movb $' ', (%edx)		
	incl %edx			   
	call donibble		# calling donibble 2nd time	
	movl $string, %eax	#move string to eax	
    	movl %ebp, %esp			
	popl %ebp               #poping from stack
	ret				        

donibble:
	movl $4, %ecx			

lp:
	shlb $1, %al		#shifting 1 byte	
	jc lp1			    
	movb $'0', (%edx)		
	jmp lp2

lp1:
	movb $'1', (%edx)		

lp2:
	incl %edx			    
	loop lp			#loop for lp    
	ret				        
    	.data
string:	                    
	.asciz "xxxx xxxx\n"      #to store binary stringkenil57@pe15:~/cs341/mp2/part2+3$ cat printbin.s[1P.s[1P.s[1P.s[1P.s[1P.s[1P.s[2Pls -lgcat pr.s[Kcat pr.s[2Pls -lgcat pr.s[K[Kintbinc.c
/* printbinc.c: driver for printbin.s 
   bob wilson 01/20/2012 
   modified by Ron Cheung 3/8/2015   */

#include <stdio.h>
extern char *printbin(unsigned char);

int main(void)
{
  unsigned int x;

  printf("enter the character's ascii value in hex: \n");
  scanf("%x",&x);
  printf("The binary format for character %c is %s\n", 
                                 x,   printbin((unsigned char)x));
  return 0;
}

kenil57@pe15:~/cs341/mp2/part2+3$ cat printbinc.c[K[K[K[K[K[K[K[K[K[K[K[K[Kt makefile
# makefile: makefile for assembly-language examples
# 
# Assumes a matched pair of sources, e.g., myprog.s and myprogc.c,
# an assembler source for a function and its C driver.

# Usage: For an assembler source, say myprog.s, with a corresponding 
#  C driver myprogc.c, set A to the basename in the make command line: 
#
#  "make A=myprog myprog.lnx" or just "make A=myprog"
#
#  (since $(A).lnx is the first make target)
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)

# also "make clean" to clean up non-source files in a directory
# All UNIX tools from ulab had been moved to LINUX by
#
#     Ron Cheung (2/28/2020)
#
# Here the assembler program has the primary source name,
# the C program is just a driver of almost the same basename:
C = $(A)c

# system directories needed for compilers, libraries, header files--
SAPC_TOOLS = /home/cheungr/serl/tutor-linux
PC_LIB = $(SAPC_TOOLS)/libc
PC_INC = $(SAPC_TOOLS)/include


CC    = gcc
CFLAGS  = -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib     -c -Wall -I$(PC_INC)
AS    = as --32
NM    = nm
LD    = ld -m elf_i386


# File suffixes:
# .c	C source (often useful both for UNIX host and SAPC)
# .s 	assembly language source
# .o  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x100100, load special startup
# module, special PC C libraries--

$(A).lnx: $(A).o $(C).o 
	$(LD) -N -Ttext 100100 -o $(A).lnx \
		$(PC_LIB)/startup0.o $(PC_LIB)/startup.o \
		$(C).o $(A).o $(PC_LIB)/libc.a
	rm -f syms;$(NM) -n $(A).lnx>$(A).syms;ln -s $(A).syms syms

$(A).o: $(A).s
	$(AS) -o $(A).o $(A).s

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).o: $(C).c
	$(CC) $(CFLAGS) -c -o $(C).o $(C).c
	
clean:
	rm -f *.o *.syms *.lnx core syms
kenil57@pe15:~/cs341/mp2/part2+3$ printbin.syms
printbin.syms: command not found
kenil57@pe15:~/cs341/mp2/part2+3$ ls
makefile			   printbinc.o	  strncpyc.c   strncpy.syms
mp2_part2_vserver_typescript	   printbin.lnx   strncpyc.o   syms
mp2_part3_tutorvserver_typescript  printbin.o	  strncpy.lnx  typescript
mp2_part3_users_typescript	   printbin.s	  strncpy.o
printbinc.c			   printbin.syms  strncpy.s
kenil57@pe15:~/cs341/mp2/part2+3$ lsprintbin.symscprintbin.symsaprintbin.symstprintbin.syms printbin.syms
00100100 T _start
00100110 T _startupc
0010013c T __x86.get_pc_thunk.bx
00100140 T main
001001c3 T printbin
001001e5 t donibble
001001ea t lp
001001f3 t lp1
001001f6 t lp2
001001fa T breakpoint
001001fc T clr_bss
0010020e T printf
0010024d T __x86.get_pc_thunk.ax
00100251 T scanf
0010029a t getch
001002f7 t ungetch
0010031e T init_devio
0010033f T init
001003b8 T rawputc
00100450 t delay
0010047d T putc
001005ad T rawgetc
0010063a T getc
001006ad T readyc
0010073a T devcontrol
001007cd T devdescript
0010085d T devname
001008e0 T __x86.get_pc_thunk.cx
001008e4 T _doscan
00100b61 t _innum
00100dcf t _instr
00100f22 t _getccl
00100fdc T __x86.get_pc_thunk.si
00100fe0 T _fdoprnt
0010119d t .L27
001011bf t .L24
001011e5 t .L26
00101216 t .L23
0010126e t .L25
00101299 t .L29
001012c1 t .L21
001012e9 t .L28
00101311 t .L20
00101479 t _prtl10
00101525 t _prtl8
001015b8 t _prtl16
00101649 t _prtX16
001016da t _prtl2
00101cc0 d _GLOBAL_OFFSET_TABLE_
00101ce0 d string
00101d00 D _sctab
00101d80 D _ctype_
00101e01 B __bss_start
00101e01 D _edata
00101e04 B sysapi2
00101e08 B _end
kenil57@pe15:~/cs341/mp2/part2+3$ exit
exit

Script done on 2021-04-03 02:41:10-04:00 [COMMAND_EXIT_CODE="0"]
