Script started on 2021-04-03 02:22:39-04:00 [TERM="xterm" TTY="/dev/pts/11" COLUMNS="80" LINES="24"]
kenil57@pe15:~/cs341/mp2/part2+3$ pwd
/home/kenil57/cs341/mp2/part2+3
kenil57@pe15:~/cs341/mp2/part2+3$ ls
makefile     printbin.lnx  printbin.syms  strncpy.lnx  strncpy.syms
printbinc.c  printbin.o    strncpyc.c	  strncpy.o    syms
printbinc.o  printbin.s    strncpyc.o	  strncpy.s    typescript
kenil57@pe15:~/cs341/mp2/part2+3$ ls -lg
total 116
-rw-r--r-- 1 cs341-1G  2082 Aug 15  2020 makefile
-rw-r--r-- 1 cs341-1G   432 Aug 15  2020 printbinc.c
-rw-r--r-- 1 cs341-1G  6416 Apr  3 02:00 printbinc.o
-rwxr-xr-x 1 cs341-1G 30572 Apr  3 02:00 printbin.lnx
-rw-r--r-- 1 cs341-1G   704 Apr  3 02:00 printbin.o
-rw-r--r-- 1 cs341-1G   687 Apr  1 13:32 printbin.s
-rw-r--r-- 1 cs341-1G  1085 Apr  3 02:00 printbin.syms
-rw-r--r-- 1 cs341-1G   926 Aug 15  2020 strncpyc.c
-rw-r--r-- 1 cs341-1G  7068 Apr  3 02:00 strncpyc.o
-rwxr-xr-x 1 cs341-1G 31600 Apr  3 02:00 strncpy.lnx
-rw-r--r-- 1 cs341-1G   548 Apr  3 02:00 strncpy.o
-rw-r--r-- 1 cs341-1G   899 Apr  3 01:57 strncpy.s
-rw-r--r-- 1 cs341-1G  1055 Apr  3 02:00 strncpy.syms
lrwxrwxrwx 1 cs341-1G    12 Apr  3 02:00 syms -> strncpy.syms
-rw-r--r-- 1 cs341-1G     0 Apr  3 02:22 typescript
kenil57@pe15:~/cs341/mp2/part2+3$ cat strncpyc.c
/* strncpyc.c: driver for testing assembly language mystrncpy function 
	Bob Wilson
	4/28/2016
     Modified by Ron Cheung 3/4/2019
   */

#include <stdio.h>
extern char *mystrncpy(char *s, char *ct, int n);

int main()
{
   char s[10], ct[100];
   int n;

  printf("Enter a string of characters:\n");
  /* read all inputs until the \n character */
  scanf("%[^\n]s", ct);
  printf("Enter the number of characters to copy:\n");
  scanf("%d", &n);

  if(s == mystrncpy(s, ct,n))
      printf("The strncpy function returned the correct pointer value.\n");
  else
      printf("The strncpy function returned the wrong pointer value.\n");
  if (!strncmp(s,ct, n))
      printf("The strncpy function copied the data correctly.\n");
  else
      printf("The strncpy function copied the data incorrectly.\n");
  printf("The content of the first %d characters of array s is: %s\n",n, s);
  return 0;	
}
kenil57@pe15:~/cs341/mp2/part2+3$ cat strncpyc.c[C[C[C[K[K[K.s
.text
	.globl  mystrncpy
mystrncpy:
	pushl	%ebp			# This will setup stack frame
	movl	%esp, %ebp
	movl	8(%ebp), %ecx		# get argument s
	movl	12(%ebp), %edx		# get argument ct
	movl    16(%ebp), %edi	        # get argument n
loop:
	movb	(%edx), %al          	# move a byte from source
	movb	%al, (%ecx)	        # move via al to destination
	incl	%ecx		        # increment to pointer
	incl	%edx	                # incrementing from pointer
	decl    %edi                    # decrement number of bytes moved to n
	cmpb    $0, %al		        # check for null terminator
	jz      exit		        # jumping if the byte moved was the null term
	cmpl    $0, %edi            	# This will check if nis 0
	jnz     loop                	# jump out of the loop # of byte moved is not equal to 0

exit:
	movl	8(%ebp), %eax		# returning address of s in %eax
	movl	%ebp, %esp		# removing stack frame
	popl	%ebp
	ret
	.endkenil57@pe15:~/cs341/mp2/part2+3$ cat makefile
# makefile: makefile for assembly-language examples
# 
# Assumes a matched pair of sources, e.g., myprog.s and myprogc.c,
# an assembler source for a function and its C driver.

# Usage: For an assembler source, say myprog.s, with a corresponding 
#  C driver myprogc.c, set A to the basename in the make command line: 
#
#  "make A=myprog myprog.lnx" or just "make A=myprog"
#
#  (since $(A).lnx is the first make target)
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)

# also "make clean" to clean up non-source files in a directory
# All UNIX tools from ulab had been moved to LINUX by
#
#     Ron Cheung (2/28/2020)
#
# Here the assembler program has the primary source name,
# the C program is just a driver of almost the same basename:
C = $(A)c

# system directories needed for compilers, libraries, header files--
SAPC_TOOLS = /home/cheungr/serl/tutor-linux
PC_LIB = $(SAPC_TOOLS)/libc
PC_INC = $(SAPC_TOOLS)/include


CC    = gcc
CFLAGS  = -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib     -c -Wall -I$(PC_INC)
AS    = as --32
NM    = nm
LD    = ld -m elf_i386


# File suffixes:
# .c	C source (often useful both for UNIX host and SAPC)
# .s 	assembly language source
# .o  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x100100, load special startup
# module, special PC C libraries--

$(A).lnx: $(A).o $(C).o 
	$(LD) -N -Ttext 100100 -o $(A).lnx \
		$(PC_LIB)/startup0.o $(PC_LIB)/startup.o \
		$(C).o $(A).o $(PC_LIB)/libc.a
	rm -f syms;$(NM) -n $(A).lnx>$(A).syms;ln -s $(A).syms syms

$(A).o: $(A).s
	$(AS) -o $(A).o $(A).s

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).o: $(C).c
	$(CC) $(CFLAGS) -c -o $(C).o $(C).c
	
clean:
	rm -f *.o *.syms *.lnx core syms
kenil57@pe15:~/cs341/mp2/part2+3$ ls
makefile     printbin.lnx  printbin.syms  strncpy.lnx  strncpy.syms
printbinc.c  printbin.o    strncpyc.c	  strncpy.o    syms
printbinc.o  printbin.s    strncpyc.o	  strncpy.s    typescript
kenil57@pe15:~/cs341/mp2/part2+3$ cat strncpy.syme[Ks
00100100 T _start
00100110 T _startupc
0010013c T __x86.get_pc_thunk.bx
00100140 T main
0010025f T mystrncpy
0010026b t loop
0010027b t exit
00100282 T breakpoint
00100284 T clr_bss
00100296 T printf
001002d5 T __x86.get_pc_thunk.ax
001002d9 T strncmp
00100345 T scanf
0010038e t getch
001003eb t ungetch
00100412 T init_devio
00100433 T init
001004ac T rawputc
00100544 t delay
00100571 T putc
001006a1 T rawgetc
0010072e T getc
001007a1 T readyc
0010082e T devcontrol
001008c1 T devdescript
00100951 T devname
001009d4 T __x86.get_pc_thunk.cx
001009d8 T _doscan
00100c55 t _innum
00100ec3 t _instr
00101016 t _getccl
001010d0 T __x86.get_pc_thunk.si
001010d4 T _fdoprnt
00101291 t .L27
001012b3 t .L24
001012d9 t .L26
0010130a t .L23
00101362 t .L25
0010138d t .L29
001013b5 t .L21
001013dd t .L28
00101405 t .L20
0010156d t _prtl10
00101619 t _prtl8
001016ac t _prtl16
0010173d t _prtX16
001017ce t _prtl2
00101ee8 d _GLOBAL_OFFSET_TABLE_
00101f00 D _sctab
00101f80 D _ctype_
00102001 B __bss_start
00102001 D _edata
00102004 B sysapi2
00102008 B _end
kenil57@pe15:~/cs341/mp2/part2+3$ exit
exit

Script done on 2021-04-03 02:23:53-04:00 [COMMAND_EXIT_CODE="0"]
